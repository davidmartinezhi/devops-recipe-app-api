# Workflow for deployement jobs
name: Deploy

# Trigger worklow on merging to main or prod
on:
  push:
    branches:
      - main
      - prod

jobs:
  # Run Linter and Tests before deploying
  test-lint:
    uses: ./.github/workflows/test-and-lint.yml
    name: Test and Lint
    secrets:
      DOCKERHUB_USER: ${{ vars.DOCKERHUB_USER }}
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}

  deploy:
    name: Deploy
    runs-on: ubuntu-22.04
    needs: [test-lint] # This job needs the test-lint job to pass before it continues
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set vars
        # We use terraform worskpace to define the environment
        # We have workspaces for prod and staging environments
        # We want to know which environment we are deploying to
        # We check the branch name and set the workspace 

        # If statement runs in bash
        # github_ref is a context variable set by github so its a reference for the branch
        # If we are in production branch, we create a file in the job that contains the word job so we can use 
        # it in future jobs to switch to the workspace

        # Then we push to ECR
        run: |
          if [[ $GITHUB_REF == 'refs/heads/prod' ]]; then
            echo "prod" > .workspace
          else
          echo "staging" > .workspace
          fi

      # Push to ECR Job
      - name: Push to ECR
        env: # Set environment variables needed for the job
          AWS_ACCESS_KEY_ID: ${{ vars.AWS_ACCESS_KEY_ID }} # this syntax is used to access secrets or variables
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

          # This step in the job is to push to ecr
          # 1. we authenticate to ecr, so we use aws commandline tools which is in the ubuntu image by default
            # we use the aws ecr get-login-password --region us-east-2 command to get a password to login to ecr 
            # we then pipe the password to the docker login command, we use the username AWS and the password we got from the command
            # Then we have the post name of the ecr repository we are logging into in ${{ vars.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-2.amazonaws.com

          # 2. and 4. We build and compress the image, because this is the finished image.
            #  Then -t flag is used to tag the image with the name of the ecr (registry) repository and the sha of the commit (the sha of each individual commit)
            # The dot symbol is to build the image that is in the current directory. the docker file in the root directory

            # In proxy we change the var to ecr repo and we pass the proxy/ so the docker image inside that folder is built


          # 3. and 5. We push the image to the ecr repository with the name of the repo and the tag
        run: |
          aws ecr get-login-password --region us-east-2 | docker login --username AWS --password-stdin ${{ vars.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-2.amazonaws.com
          docker build --compress -t ${{ vars.ECR_REPO_APP }}:$GITHUB_SHA .
          docker push ${{ vars.ECR_REPO_APP }}:$GITHUB_SHA
          docker build --compress -t ${{ vars.ECR_REPO_PROXY }}:$GITHUB_SHA proxy/
          docker push ${{ vars.ECR_REPO_PROXY }}:$GITHUB_SHA

      - name: Terraform Apply

        # Setting up env variables that can be used in this step
        # The aws cli checks for this env variables automatically for the push to ecr
        # For terradorm in the docker compose in the infra folder, we need to set the env variables
        env:
          AWS_ACCESS_KEY_ID: ${{ vars.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          TF_VAR_DB_PASSWORD: ${{ secrets.TF_VAR_DB_PASSWORD }} # Pulled from secrets, if it starts with TF_VAR it is a terraform variable
          TF_VAR_DJANGO_SECRET_KEY: ${{ secrets.TF_VAR_DJANGO_SECRET_KEY }} # Pulled from secrets

          # 1. We are setting the ecr image to the path of the ecr image we pushed in the previous job (matches the tag)
          # 2. The same for the proxy
          # 3. Sets variable caled workspace and the content inside the parenthesis will output the value in that file (the value saved in the previous stop, when variables are set)
          # 4. We change directory to the infra folder
          # 5. We run terraform init in the deploy folder (Initializes the state backend and pulls all the providers needed to run terraform)
          # 6. Workspace select -or-create $workspace is to select the workspace we want to deploy to, so we switch to that workspace so we can apply the changes to the appropriate environment
          # 7. We run terraform apply -auto-approve to apply the changes to the infrastructure
        run: |
          export TF_VAR_ecr_app_image="${{ vars.ECR_REPO_APP }}:$GITHUB_SHA"
          export TF_VAR_ecr_proxy_image="${{ vars.ECR_REPO_PROXY }}:$GITHUB_SHA"
          workspace=$(cat .workspace)
          cd infra/
          docker compose run --rm terraform -chdir=deploy/ init
          docker compose run --rm terraform -chdir=deploy/ apply -auto-approve
          docekr compose run --rm terraform -chdir=deploy/ workspace select -or-create $workspace
