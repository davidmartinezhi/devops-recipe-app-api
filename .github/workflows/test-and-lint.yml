name: Test and Lint

on: 
  workflow_call:
    secrets: # It is possible to have even optional secrets
      DOCKERHUB_USER:
        required: true
        description: 'Username for Dockerhub auth'
      DOCKERHUB_TOKEN:
        required: true
        description: 'Token for Dockerhub auth'

# We define jobs
jobs:

  # We define a job called python for running our python related jobs
  python:
    name: Python # Name of the job
    runs-on: ubuntu-22.04 # OS that the job will run on

    # Steps that will run in the job
    steps:
      - name: Login to Docker Hib # Name of the step
        uses: docker/login-action@v3 # Uses the docker login action, login to docker for the duration of the job
        with: # Inputs for the action, use secrets from block above
          username: ${{ secrets.DOCKERHUB_USER }} # Username for Dockerhub
          password: ${{ secrets.DOCKERHUB_TOKEN }} # Token for Dockerhub

      - name: Checkout # Name of the step
        uses: actions/checkout@v4 # Uses the checkout action, checks our code
      
      - name: Test # Runs the unit tests for our project
        run: docker compose run --rm app sh -c "python manage.py wait_for_db && python manage.py test"
      
      - name: Python flake8 # Runs the linter for our python code
        run: docker compose run --rm app sh -c "flake8"


  terraform:
    name: Terraform
    runs-on: ubuntu-22.04
    steps:
      # Login to dockerhub
      - name: Login to Docker Hib # Name of the step
        uses: docker/login-action@v3 # Uses the docker login action, login to docker for the duration of the job
        with: # Inputs for the action, use secrets from block above
          username: ${{ secrets.DOCKERHUB_USER }} # Username for Dockerhub
          password: ${{ secrets.DOCKERHUB_TOKEN }} # Token for Dockerhub

      # Checkout the code
      - name: Checkout # Name of the step
        uses: actions/checkout@v4 # Uses the checkout action, checks our code

      # Run terraform lint
      - name: Terraform lint

        # 1. go to the infra folder
        # 2. run terraform init without the backend, because we dont need to actually communicate with the be
        # because we are not making any changes there
        # 3. run terraform validate
        # 4. run terraform fmt -check, we just check if the code is formatted correctly, we dont make any changes
        run: |
          cd infra/
          docker compose run --rm terraform -chdir=deploy/ init -backend=false
          docker compose run --rm terraform -chdir=setup/ init -backend=false
          docker compose run --rm terraform -chdir=setup/ validate
          docker compose run --rm terraform -chdir=setup/ fmt -check
          docker compose run --rm terraform -chdir=deploy/ validate
          docker compose run --rm terraform -chdir=deploy/ fmt -check

